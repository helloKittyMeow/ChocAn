import java.util.*;import java.io.*;public class ProviderDirectory {  private static BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));  private static List<Service> services = new LinkedList<Service>();  private static String getToken(String prompt) {    while (true) {      try {        System.out.print(prompt);        String line = reader.readLine();        StringTokenizer tokenizer = new StringTokenizer(line,"\n\r\f");        if (tokenizer.hasMoreTokens()) {          return tokenizer.nextToken();        }      } catch (IOException ioe) {        System.exit(0);      }    }	}    private static int requestServiceCode(String prompt) {    while (true) {		  try {        String item = getToken(prompt);        Integer num = Integer.valueOf(item);        if ((num.intValue() >= 0) && (num.intValue() <= 999999)) {          return num.intValue();        } else {          System.out.println("Please input a 6 digit number");        }		  } catch (NumberFormatException nfe) {        System.out.println("Please input a number");		  }		}  }    private static String promptString(String prompt, int MAX) {    while (true) {      String item = getToken(prompt);      // check string length      return item;		}  }    private static float promptFloat(String prompt, double MAX) {    while (true) {		  try {        String item = getToken(prompt);        Float num = Float.valueOf(item);        if ((num.floatValue() >= 0) && (num.floatValue() <= MAX)) {          return num.floatValue();        } else {          System.out.println("Please enter a value between 0 and " + MAX);        }		  } catch (NumberFormatException nfe) {        System.out.println("Please input a number");		  }		}  }    private static int getNumber(String prompt, int MIN, int MAX) {		while (true) {		  try {        String item = getToken(prompt);        Integer num = Integer.valueOf(item);        if ((num.intValue() >= MIN) && (num.intValue() <= MAX)) {          return num.intValue();        } else {          System.out.println("Please enter a value between " + MIN + " and " + MAX);        }		  } catch (NumberFormatException nfe) {        System.out.println("Please input a number ");		  }		}	}    public static void manage() {    final int VIEW_SERVICES = 1;    final int ADD_SERVICE = 2;    final int MODIFY_SERVICE = 3;    final int DELETE_SERVICE = 4;    final int EXIT = 5;        int command;    do {    //  System.out.println("\nOPERATOR TERMINAL");      System.out.println("\nEnter a number between " + VIEW_SERVICES + " and " + EXIT + " as explained below:");      System.out.println("  " + VIEW_SERVICES + " to view a list of services");      System.out.println("  " + ADD_SERVICE + " to add a service");      System.out.println("  " + MODIFY_SERVICE + " to modify a service");      System.out.println("  " + DELETE_SERVICE + " to remove a service");      System.out.println("  " + EXIT + " to exit");            command = getNumber("Enter command: ", 1, EXIT);            int code;      switch (command) {        case VIEW_SERVICES:		  printServices();                                break;        case ADD_SERVICE:	      addService();                                break;        case MODIFY_SERVICE:	  code = requestServiceCode("Enter service code: ");                                modifyService(code);                                break;        case DELETE_SERVICE:	  code = requestServiceCode("Enter service code: ");                                removeService(code);                                break;      }    } while (command != EXIT);  }    public static boolean addService() {    load();        int code;    String name;    double fee;        code = requestServiceCode("Enter code (6 digits): ");        name = promptString("Enter service name (20 characters): ", 20);        fee = promptFloat("Enter service fee: ", 999.99);        Service service = new Service(code, name, fee);        services.add(service);        save();        return true;  }    // This method modifies a service.  public static void modifyService(int code) {    load();        Service service = null;    for (ListIterator iterator = services.listIterator(); iterator.hasNext(); ) {      Service temp = (Service) iterator.next();      if(temp.getCode() == code) {        service = temp;        break;      }    }    if (service == null) {      System.out.println("Cannot find service with code: " + code);      return;    }        final int MODIFY_NAME = 1;    final int MODIFY_FEE = 2;    final int EXIT = 3;        int command;    do {      System.out.println("\nMODIFY SERVICE " + code);      System.out.println("\nEnter a number between " + MODIFY_NAME + " and " + EXIT + " as explained below:");      System.out.println("  " + MODIFY_NAME + " to modify the name");      System.out.println("  " + MODIFY_FEE + " to modify the fee");      System.out.println("  " + EXIT + " to exit");            command = getNumber("Enter command: ", 1, EXIT);            switch (command) {        case MODIFY_NAME:	  String name = promptString("Enter service name (20 characters): ", 20);                            service.setName(name);                            break;        case MODIFY_FEE:	  double fee = promptFloat("Enter service fee: ", 999.99);                            service.setFee(fee);                            break;      }    } while (command != EXIT);        save();  }    // This method removes a service.  public static void removeService(int code) {    load();        for (ListIterator iterator = services.listIterator(); iterator.hasNext(); ) {      Service service = (Service) iterator.next();      if(service.getCode() == code) {        // remove service        services.remove(service);        System.out.println("Removed service: " + code);        break;      }    }        save();  }  // This method prints out all the services with their name,fee, and code  public static void printServices() {    for (ListIterator iterator = services.listIterator(); iterator.hasNext(); ) {      Service service = (Service) iterator.next();      String name = service.getName();      System.out.println(service);    }  }  // This method finds a service name through its service code  public static String getServiceName(int code) {    for (ListIterator iterator = services.listIterator(); iterator.hasNext(); ) {      Service service = (Service) iterator.next();      int serviceCode = service.getCode();      if (serviceCode == code) {        String name = service.getName();        return name;      }    }    return null;  }  // This method finds a service fee through its service code  public static double getServiceFee(int code) {    for (ListIterator iterator = services.listIterator(); iterator.hasNext(); ) {      Service service = (Service) iterator.next();      int serviceCode = service.getCode();      if (serviceCode == code) {        double fee = service.getFee();        return fee;      }    }    return 0;  }  // This method saves Provider Directory to a file.  public static void save() {    // save the services to a file      }  // This method reads Provider Directory to a file.  public static void load() {    // read the services to a file      }}